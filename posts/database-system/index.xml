<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Database System on ztqakita's Blog</title><link>https://ztqakita.github.io/posts/database-system/</link><description>Recent content in Database System on ztqakita's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 14 Dec 2020 06:00:20 +0600</lastBuildDate><atom:link href="https://ztqakita.github.io/posts/database-system/index.xml" rel="self" type="application/rss+xml"/><item><title>Database System Lecture Note 4</title><link>https://ztqakita.github.io/posts/database-system/database_system_4/</link><pubDate>Mon, 14 Dec 2020 06:00:20 +0600</pubDate><guid>https://ztqakita.github.io/posts/database-system/database_system_4/</guid><description>Chapter 12 Query Processing 12.1 Overview 12.2 Measures of Query Cost Disk access is the predominant cost. Use the number of block transfered from disk and the number of seeks as the cost measures.
12.3 Selection Operation Types of query conditions (查询条件类型) equality(等值), e.g.salary = 100 range (范围), e.g. salary between 50 and 400 comparison (比较), e.g. salary &amp;gt;300 NOTE: B+索引可以使用全部查询类型，而Hash索引只能等值查询。
Several file scan algorithms linear search/scan – A1 无索引、乱序：扫描全部blocks，才能找到全部满足查询条件的数据。 Cost estimate = $b_r$ block transfers + 1 seek selections using indices – A2, A3, A4 A2 主索引：Cost = $(h_i + 1) \times (t_T + t_S)$ A3 聚集索引不唯一：Cost = $h_i \times (t_T + t_S) + t_S + t_T\times b$ A4 非聚集索引不唯一：Cost = $(h_i + n) \times (t_T + t_S)$ selections involving comparisons – A5, A6 A5: 主索引，找叶子节点 A6: 辅索引，找叶子节点所指向的记录 complex selections – A7, A8, A9, A10 12.</description></item><item><title>Database System Lecture Note 3</title><link>https://ztqakita.github.io/posts/database-system/database_system_3/</link><pubDate>Mon, 23 Nov 2020 06:00:20 +0600</pubDate><guid>https://ztqakita.github.io/posts/database-system/database_system_3/</guid><description>Chapter 10 Storage and File Structure 对于应用程序和disk而言，中间会有data buffer作为数据交换的缓冲池，替换算法一般采用LRU算法，注意两种可控的参数，在实验中会用到：
连接时长 buffer大小 逻辑结构：
流式文件、基于记录文件、基于索引文件 物理结构：
以block为单位进行存储 contiguous linked indexed 10.5 File Organization Each file is a sequence of records, and a relational table is a set of tuples. A tuple is stored as a record in the DB file.
10.5.1 Fixed-Length Records a block contains several records. Store record i starting from byte n * (i – 1), where n is the size of each record.</description></item><item><title>Database System Lecture Note 2</title><link>https://ztqakita.github.io/posts/database-system/database_system_2/</link><pubDate>Fri, 23 Oct 2020 06:00:20 +0600</pubDate><guid>https://ztqakita.github.io/posts/database-system/database_system_2/</guid><description>Chapter 7 Database Design and E-R Model 7.2 Concepts Entity sets Relationship sets 对于多元联系$\Rightarrow$二元联系$\Rightarrow$关系表 Attribute 7.3 Constraints Mapping Cardinalities one to one one to many many to one many to many Keys superkey candidate key primary key Chapter 8 Schema Normalization 核心思想：将large schemas decompose to smaller schema. 建立functional dependency, 并利用两表查询的的方式进行查询(此处详见第7章)。 在第7章通过将E-R图进行转换，得到面向特定的初始关系模式集，这些关系模式集可能存在多种数据依赖关系：
Functional Dependencies Multivalued Dependencies Join Dependencies (略) 如果直接根据初始关系模式构造DBS，由于初始关系模式中数据依赖关系的存在，可能会违反DB的完整性约束</description></item><item><title>Database System Lecture Note 1</title><link>https://ztqakita.github.io/posts/database-system/database_system_1/</link><pubDate>Tue, 15 Sep 2020 06:00:20 +0600</pubDate><guid>https://ztqakita.github.io/posts/database-system/database_system_1/</guid><description>Chapter 1 Introduction 1.1 DB, DBMS, DBS, DBAS DB: a collection of interrelated data stored in systems as files DBMS: a set of programs to access the data in DB DBS: users + DBMS + DB 1.2 View of Data 1.2.1 Levels of Data Abstraction View Level: how the data items in DB are used by different users Logical Level: e.</description></item></channel></rss>